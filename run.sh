#!/usr/bin/env bash

# This script is used to run the application

# Spin up kafka cluster and Schema Registry
docker-compose up -d

# wait for the kafka cluster to be ready
sleep 60

# spin up ksql server
docker-compose --profile ksqldb-community up -d

# wait for the ksql server to be ready
sleep 60

# create sample messages with ksql-datagen
ksql-datagen value-format=avro quickstart=pageviews msgRate=1 bootstrap-server=localhost:9092 schemaRegistryUrl=http://localhost:8081 topic=pageviews &>/dev/null &

# get pid for ksql-datagen process
datagen_pid=$!

# check messages
# kafka-avro-console-consumer --bootstrap-server localhost:9092 --property schema.registry.url=http://localhost:8081 --topic pageviews

# create first statement
# ksql http://localhost:8088 <<EOF
# SET 'auto.offset.reset' = 'earliest';
# PRINT 'pageviews' FROM BEGINNING;
# EOF

# create second statement
ksql http://localhost:8088 <<EOF
SET 'auto.offset.reset' = 'earliest';
CREATE OR REPLACE STREAM pageviews WITH (
    KAFKA_TOPIC = 'pageviews',
    VALUE_FORMAT = 'AVRO'
);

CREATE OR REPLACE TABLE pageviews_users 
WITH (kafka_topic='pageviews_users', value_format='AVRO', partitions=1, replicas=1) 
AS
    SELECT userid, count(*) AS numclicks
    FROM pageviews
    WINDOW TUMBLING (size 30 second)
    GROUP BY userid
    EMIT CHANGES;
EOF

# check if messages are produced by ksql statements
echo "Use the command from another shell to check if messages are generated by ksqldb \nkafka-avro-console-consumer --bootstrap-server localhost:9092 --property schema.registry.url=http://localhost:8081 --topic pageviews_users"

# scale up ksqldb with enterprise version
docker-compose --profile ksqldb-enterprise up -d

# wait for the ksql server to be ready
sleep 10

# ask to close the ksqldb community
read -p "Press enter to shutdown ksqldb community version"

# stop 1 ksql server
docker stop ksqldb-server

# ask to close the application
read -p "Press enter to close the application"

# kill ksql-datagen process and stop the application
kill -9 $datagen_pid
docker-compose --profile ksqldb-community --profile ksqldb-enterprise down -v
